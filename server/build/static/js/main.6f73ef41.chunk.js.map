{"version":3,"sources":["UserInput.js","TrackHistory.js","Header.js","Lyrics.js","App.js","index.js"],"names":["UserInput","username","this","props","setUpdateLyricsState","className","handleSubmit","InterfaceUpdateButton","onClick","onClickUpdateInterface","Component","UserNameField","handleChange","event","setState","userinput","target","value","onFormSubmit","preventDefault","state","length","initialState","bind","onSubmit","htmlFor","type","name","id","onChange","numberOfTracks","Header","toggleTrackHistory","TrackHistory","track","updateLyricsBool","setLyrics","trackNumber","trackHistory","recenttracks","key","trackinfo","onClickSetLyrics","trackHistoryClass","hideTrackHistory","tracks","i","push","renderTrack","Track","trackIcon","image","TrackIcon","TrackTitle","title","TrackArtist","artist","src","alt","Lyrics","lyricDiv","React","createRef","prevprops","lyrics","current","scrollTop","lyricsText","error","ref","App","lastFmHistory","updateLyrics","mostRecentScrobbleId","selectedSong","updateInterface","interval","gettingLyrics","clearInterval","setInterval","e","booleanValue","Promise","resolve","reject","fetch","then","res","json","getLastFmHistoryJson","response","updateLyricsPane","responseId","mbid","mostRecentScrobble","track_title","console","log","shortenedTrackName","substring","lastIndexOf","newTrack","trackLyrics","selectedSongMarkup","mainContent","Spinner","animation","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f73ef41.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass UserInput extends Component {\r\n  onClickUpdateInterface(username){\r\n    this.props.setUpdateLyricsState(true);\r\n  }\r\n\r\n  render() {\r\n    return (  \r\n      <div className=\"userinput\">\r\n      <UserNameField\r\n        handleSubmit={this.props.handleSubmit}/>\r\n       <h2>{this.props.username}</h2> \r\n      <InterfaceUpdateButton\r\n        onClick={()=>this.onClickUpdateInterface(this.props.username)}\r\n      />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass UserNameField extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.initialState = {userinput: ''};\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  handleChange = (event) => { \r\n   this.setState({userinput: event.target.value});\r\n  }\r\n\r\n  onFormSubmit  = (event) => {\r\n    event.preventDefault();\r\n    if(this.state.userinput.length > 0){\r\n      this.props.handleSubmit(this.state.userinput);\r\n      this.setState(this.initialState);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (  \r\n      <form onSubmit={this.onFormSubmit}>\r\n        <label htmlFor=\"username\">Username</label>\r\n        <input      \r\n          type=\"text\"\r\n          name=\"username\"\r\n          id=\"username\"\r\n          value={this.state.userinput}\r\n          onChange={this.handleChange}/>\r\n          <button type=\"submit\">Submit</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nfunction InterfaceUpdateButton(props){\r\n  return(\r\n    <button onClick={props.onClick}>Update LastFM History</button>\r\n  )\r\n}\r\nexport default UserInput","import React, {Component} from 'react'\r\n\r\nvar numberOfTracks;\r\n\r\nclass TrackHistory extends Component {\r\n  onClickSetLyrics(track, updateLyricsBool){\r\n    this.props.setLyrics(track);\r\n    this.props.setUpdateLyricsState(updateLyricsBool);\r\n  }\r\n  renderTrack(trackNumber){\r\n    const track = this.props.trackHistory.recenttracks.track[trackNumber];\r\n    if(trackNumber === 0){\r\n      return(\r\n        <Track\r\n        key={trackNumber}\r\n        trackNumber={trackNumber} \r\n        trackinfo={track}\r\n        onClick={()=>this.onClickSetLyrics(track, true)}\r\n        />\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n        <Track \r\n        key={trackNumber}\r\n        trackNumber={trackNumber} \r\n        trackinfo={track}\r\n        onClick={()=>this.onClickSetLyrics(track, false)}\r\n        />\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    let  trackHistoryClass = 'trackHistory';\r\n    if(this.props.hideTrackHistory){\r\n      trackHistoryClass += ' mobile-hide'\r\n    }\r\n\r\n    if(this.props.trackHistory && \r\n    this.props.trackHistory.recenttracks &&\r\n    this.props.trackHistory.recenttracks.track.length > 0){\r\n      numberOfTracks = this.props.trackHistory.recenttracks.track.length;\r\n      const tracks = []\r\n      for(var i = 0; i < numberOfTracks; i++){\r\n        tracks.push(this.renderTrack(i))\r\n      }\r\n      return (  \r\n        <div className={trackHistoryClass}>\r\n          {tracks}\r\n        </div>\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n      <div className={trackHistoryClass}>\r\n      </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nclass Track extends Component{  \r\n  render(){\r\n    let trackIcon\r\n    if(this.props.trackinfo.image[1]){\r\n      trackIcon = <TrackIcon image={this.props.trackinfo.image[1]['#text']}/>\r\n    }\r\n    else{\r\n      trackIcon = <TrackIcon image={''}/>\r\n    }\r\n\r\n    if(this.props.trackNumber === numberOfTracks){\r\n      return(\r\n        <div className={'track track' + this.props.trackNumber}\r\n        id='last-track'\r\n        onClick={this.props.onClick}>\r\n          {trackIcon}\r\n          <div className='track-details'>\r\n            <TrackTitle title={this.props.trackinfo.name}/>\r\n            <TrackArtist artist={this.props.trackinfo.artist['#text']}/>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n        <div className={'track track'+this.props.trackNumber}  \r\n        onClick={this.props.onClick}>\r\n          {trackIcon}\r\n          <div className='track-details'>\r\n            <TrackTitle title={this.props.trackinfo.name}/>\r\n            <TrackArtist artist={this.props.trackinfo.artist['#text']}/>\r\n          </div>\r\n  \r\n        </div>\r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n\r\nfunction TrackIcon(props){\r\n  if(props.image.length > 0 ){\r\n    return(\r\n      <img src={props.image} alt='track art'></img>\r\n    )\r\n  }\r\n  else{\r\n    return(\r\n      <img src={'https://lastfm.freetls.fastly.net/i/u/64s/4128a6eb29f94943c9d206c08e625904.webp'} alt='track art'></img>\r\n    )\r\n  }\r\n}\r\n\r\nfunction TrackTitle(props){\r\n  return(\r\n    <span>{props.title}</span>\r\n  )\r\n}\r\n\r\nfunction TrackArtist(props){\r\n  return(\r\n    <span>{props.artist}</span>\r\n  )\r\n}\r\n\r\nexport default TrackHistory","import React, {Component} from 'react'\r\n\r\nclass Header extends Component {\r\n\r\n  render() {\r\n    return (  \r\n        <div className=\"header\">\r\n          <h1>Scrobbling Lyrics</h1>\r\n          <button id='toggleHistory' onClick={this.props.toggleTrackHistory}>History</button>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header","import React, {Component} from 'react'\r\n\r\nclass Lyrics extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.lyricDiv = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate(prevprops){\r\n    if(this.props){\r\n      if(this.props.lyrics.lyrics !== prevprops.lyrics.lyrics){\r\n        this.lyricDiv.current.scrollTop = 0;\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n\r\n    let lyricsText = <p></p>;\r\n    if(this.props.lyrics && this.props.lyrics.lyrics){\r\n      lyricsText = <p>{this.props.lyrics.lyrics}</p>;\r\n    }\r\n    else if(this.props.lyrics && this.props.lyrics.error){\r\n      lyricsText = <p>No Lyrics found</p>;\r\n    }\r\n\r\n    return (  \r\n      <div className='lyrics-pane' ref={this.lyricDiv}>\r\n        {lyricsText}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Lyrics","import React, {Component} from 'react'\r\n\r\nimport UserInput from './UserInput'\r\nimport Header from './Header'\r\nimport TrackHistory from './TrackHistory'\r\nimport Lyrics from './Lyrics'\r\nimport Spinner from 'react-bootstrap/Spinner' \r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      username: '', \r\n      lastFmHistory:[],\r\n      lyrics: [],\r\n      updateLyrics: true,\r\n      mostRecentScrobbleId: '',\r\n      selectedSong: {'artist': '', 'track':''},\r\n      hideTrackHistory: true,\r\n    };\r\n    this.updateInterface =this.updateInterface.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.setLyrics = this.setLyrics.bind(this);\r\n    this.setUpdateLyricsState = this.setUpdateLyricsState.bind(this);\r\n    this.toggleTrackHistory = this.toggleTrackHistory.bind(this);\r\n    this.interval = null;\r\n    this.gettingLyrics = false; \r\n  }\r\n\r\n  toggleTrackHistory(){\r\n    this.setState({hideTrackHistory:!this.state.hideTrackHistory});\r\n  }\r\n\r\n  handleSubmit(username){\r\n    this.setState({username: username})\r\n    this.updateInterface(username);\r\n    this.clearInterval();\r\n    this.interval = setInterval(e => this.updateInterface(username),60000);\r\n  }\r\n\r\n  setUpdateLyricsState(booleanValue){\r\n    this.setState({updateLyrics:booleanValue},()=>{\r\n      this.updateInterface(this.state.username);\r\n    });\r\n  }\r\n\r\n  clearInterval(){\r\n    if(this.interval){\r\n      clearInterval(this.interval);\r\n      this.interval = null;\r\n    }\r\n  }\r\n\r\n  updateInterface(username){\r\n    getLastFmHistoryJson(username).then(response =>{\r\n      if(response.recenttracks){\r\n        this.updateLyricsPane(response)\r\n        this.setState({lastFmHistory: response})\r\n      }\r\n      else{\r\n        this.setState({username:'User not found'})\r\n      }\r\n    })\r\n  }\r\n\r\n  updateLyricsPane(response){\r\n    if(this.state.updateLyrics){\r\n      // If there are any scrobbled tracks\r\n      if(response.recenttracks.track.length > 0){\r\n        // If the most recent scrobble hasn't already had its lyrics fetched\r\n        let responseId = response.recenttracks.track[0].mbid;\r\n        if(responseId !== this.state.mostRecentScrobble || responseId === ' '){\r\n          this.setLyrics(response.recenttracks.track[0]);\r\n          this.setState({mostRecentScrobble: responseId});\r\n        }\r\n      } \r\n      else{\r\n        this.setState({lyrics:{'error':'no tracks found'}})\r\n      }\r\n    }\r\n  }\r\n\r\n  setLyrics(track){\r\n    if(!this.gettingLyrics){\r\n      this.gettingLyrics = true;\r\n      getTrackLyricsJson(track.artist['#text'], track.name)\r\n      .then(response =>{\r\n        console.log(response);\r\n        if(response.error){\r\n          let shortenedTrackName = track.name.substring(0, track.name.lastIndexOf(\" \"));\r\n          if(shortenedTrackName.length > 0){\r\n            let newTrack = track;        \r\n            newTrack.name = shortenedTrackName;\r\n            this.gettingLyrics = false;\r\n            this.setLyrics(newTrack);\r\n          }\r\n          else{\r\n            this.gettingLyrics = false;\r\n            this.setState({lyrics:response})\r\n            this.setState({selectedSong:{'artist': '', 'track': ''}})\r\n          }\r\n        } \r\n        else{\r\n          this.gettingLyrics = false;\r\n          this.setState({selectedSong:{'artist': track.artist['#text'], 'track':track.name}})\r\n          this.setState({lyrics:response})\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const username = this.state.username;\r\n    const lastFmHistory = this.state.lastFmHistory;\r\n    const trackLyrics = this.state.lyrics\r\n    const selectedSong = this.state.selectedSong;\r\n    const hideTrackHistory = this.state.hideTrackHistory;\r\n\r\n    let selectedSongMarkup = <span className='currentTrack  '></span>;\r\n    if(selectedSong.artist !== ''){\r\n      selectedSongMarkup = <span className='currentTrack'>{selectedSong.track} by {selectedSong.artist}</span>\r\n    }\r\n    let mainContent = <Lyrics lyrics={trackLyrics}/>\r\n    if(this.gettingLyrics){\r\n      mainContent = \r\n      <div className='spinner-container'>\r\n        <Spinner id='loading-spinner' animation=\"border\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n        </Spinner> \r\n      </div>\r\n    }\r\n    return (\r\n      <div className=\"appContainer\">\r\n        <Header \r\n          toggleTrackHistory ={this.toggleTrackHistory}\r\n        />\r\n        <TrackHistory\r\n          hideTrackHistory={hideTrackHistory}\r\n          trackHistory={lastFmHistory}\r\n          setLyrics={this.setLyrics}\r\n          setUpdateLyricsState={this.setUpdateLyricsState}/>\r\n        <UserInput  \r\n          handleSubmit={this.handleSubmit}\r\n          username={username}\r\n          updateInterface={this.updateInterface}\r\n          setUpdateLyricsState={this.setUpdateLyricsState}/>\r\n        {selectedSongMarkup}\r\n        {mainContent}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction getLastFmHistoryJson (username){\r\n  return new Promise((resolve,reject) =>{\r\n    fetch ('/getlastfm/' + username)\r\n    .then(res => {\r\n      resolve(res.json());  \r\n    });\r\n  })\r\n}\r\n\r\nfunction getTrackLyricsJson(artist,track_title){ \r\n  return new Promise((resolve,reject) =>{\r\n    fetch('/getlyrics/' + artist +'/' + track_title)\r\n    .then(res =>{\r\n     resolve(res.json()); \r\n    })\r\n  })\r\n} \r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './stylesheets/index.css'\nimport './stylesheets/reset.css'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}