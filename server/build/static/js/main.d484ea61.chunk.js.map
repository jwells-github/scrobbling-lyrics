{"version":3,"sources":["UserInput.js","TrackHistory.js","Header.js","Lyrics.js","SelectedSongDisplay.js","App.js","index.js"],"names":["UserInput","username","this","props","setUpdateLyricsState","userDisplay","length","className","handleSubmit","InterfaceUpdateButton","onClick","onClickUpdateInterface","Component","UserNameField","handleChange","event","setState","userinput","target","value","onFormSubmit","preventDefault","state","initialState","bind","onSubmit","htmlFor","type","name","id","onChange","numberOfTracks","Header","toggleTrackHistory","TrackHistory","track","updateLyricsBool","setLyrics","trackNumber","trackHistory","recenttracks","key","trackinfo","onClickSetLyrics","trackHistoryClass","hideTrackHistory","tracks","i","push","renderTrack","Track","trackIcon","image","TrackIcon","TrackTitle","title","TrackArtist","artist","imageURL","src","alt","Lyrics","lyricDiv","React","createRef","prevprops","lyrics","current","scrollTop","lyricsText","error","ref","SelectedSongDisplay","trackImage","selectedSong","art","App","lastFmHistory","fetchedTracks","updateLyrics","mostRecentScrobbleId","updateInterface","interval","gettingLyrics","clearInterval","setInterval","e","booleanValue","Promise","resolve","reject","fetch","then","res","json","getLastFmHistoryJson","response","updateLyricsPane","responseId","mbid","mostRecentScrobble","mostRecentTrack","track_title","fetchedTrack","find","storedTrack","trackTitle","shortenedTrackName","substring","lastIndexOf","newTrack","trackArt","trackLyrics","mainContent","Spinner","animation","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d484ea61.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass UserInput extends Component {\r\n  onClickUpdateInterface(username){\r\n    this.props.setUpdateLyricsState(true);\r\n  }\r\n\r\n  render() {\r\n    let userDisplay = (this.props.username.length > 0 ? 'User: ' + this.props.username : ' ')\r\n    return (  \r\n      \r\n      <div className=\"userinput\">\r\n      <UserNameField\r\n        handleSubmit={this.props.handleSubmit}/>\r\n       <h2>{userDisplay}</h2> \r\n      <InterfaceUpdateButton\r\n        onClick={()=>this.onClickUpdateInterface(this.props.username)}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass UserNameField extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.initialState = {userinput: ''};\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  handleChange = (event) => { \r\n   this.setState({userinput: event.target.value});\r\n  }\r\n\r\n  onFormSubmit  = (event) => {\r\n    event.preventDefault();\r\n    if(this.state.userinput.length > 0){\r\n      this.props.handleSubmit(this.state.userinput);\r\n      this.setState(this.initialState);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (  \r\n      <form onSubmit={this.onFormSubmit}>\r\n        <label htmlFor=\"username\">Username</label>\r\n        <input      \r\n          type=\"text\"\r\n          name=\"username\"\r\n          id=\"username\"\r\n          value={this.state.userinput}\r\n          onChange={this.handleChange}/>\r\n          <button type=\"submit\">Submit</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nfunction InterfaceUpdateButton(props){\r\n  return(\r\n    <button onClick={props.onClick}>Update LastFM History</button>\r\n  )\r\n}\r\nexport default UserInput","import React, {Component} from 'react'\r\n\r\nvar numberOfTracks;\r\n\r\nclass TrackHistory extends Component {\r\n  onClickSetLyrics(track, updateLyricsBool){\r\n    this.props.setLyrics(track);\r\n    this.props.setUpdateLyricsState(updateLyricsBool);\r\n  }\r\n  renderTrack(trackNumber){\r\n    const track = this.props.trackHistory.recenttracks.track[trackNumber];\r\n    if(trackNumber === 0){\r\n      return(\r\n        <Track\r\n        key={trackNumber}\r\n        trackNumber={trackNumber} \r\n        trackinfo={track}\r\n        onClick={()=>this.onClickSetLyrics(track, true)}\r\n        />\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n        <Track \r\n        key={trackNumber}\r\n        trackNumber={trackNumber} \r\n        trackinfo={track}\r\n        onClick={()=>this.onClickSetLyrics(track, false)}\r\n        />\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    let  trackHistoryClass = 'trackHistory';\r\n    if(this.props.hideTrackHistory){\r\n      trackHistoryClass += ' mobile-hide'\r\n    }\r\n\r\n    if(this.props.trackHistory && \r\n    this.props.trackHistory.recenttracks &&\r\n    this.props.trackHistory.recenttracks.track.length > 0){\r\n      numberOfTracks = this.props.trackHistory.recenttracks.track.length;\r\n      const tracks = []\r\n      for(var i = 0; i < numberOfTracks; i++){\r\n        tracks.push(this.renderTrack(i))\r\n      }\r\n      return (  \r\n        <div className={trackHistoryClass}>\r\n          {tracks}\r\n        </div>\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n      <div className={trackHistoryClass}>\r\n      </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nclass Track extends Component{  \r\n  render(){\r\n    let trackIcon\r\n    if(this.props.trackinfo.image[1]){\r\n      trackIcon = <TrackIcon image={this.props.trackinfo.image[1]['#text']}/>\r\n    }\r\n    else{\r\n      trackIcon = <TrackIcon image={''}/>\r\n    }\r\n\r\n    if(this.props.trackNumber === numberOfTracks){\r\n      return(\r\n        <div className={'track track' + this.props.trackNumber}\r\n        id='last-track'\r\n        onClick={this.props.onClick}>\r\n          {trackIcon}\r\n          <div className='track-details'>\r\n            <TrackTitle title={this.props.trackinfo.name}/>\r\n            <TrackArtist artist={this.props.trackinfo.artist['#text']}/>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n        <div className={'track track'+this.props.trackNumber}  \r\n        onClick={this.props.onClick}>\r\n          {trackIcon}\r\n          <div className='track-details'>\r\n            <TrackTitle title={this.props.trackinfo.name}/>\r\n            <TrackArtist artist={this.props.trackinfo.artist['#text']}/>\r\n          </div>\r\n  \r\n        </div>\r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n\r\nfunction TrackIcon(props){\r\n  let imageURL = (props.image.length > 0 ? props.image : 'https://lastfm.freetls.fastly.net/i/u/64s/4128a6eb29f94943c9d206c08e625904.webp');\r\n    return(\r\n      <img src={imageURL} alt='track art'></img>\r\n    )\r\n}\r\n\r\nfunction TrackTitle(props){\r\n  return(\r\n    <span>{props.title}</span>\r\n  )\r\n}\r\n\r\nfunction TrackArtist(props){\r\n  return(\r\n    <span>{props.artist}</span>\r\n  )\r\n}\r\n\r\nexport default TrackHistory","import React, {Component} from 'react'\r\n\r\nclass Header extends Component {\r\n\r\n  render() {\r\n    return (  \r\n        <div className=\"header\">\r\n          <h1>Scrobbling Lyrics</h1>\r\n          <button id='toggleHistory' onClick={this.props.toggleTrackHistory}>History</button>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header","import React, {Component} from 'react'\r\n\r\nclass Lyrics extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.lyricDiv = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate(prevprops){\r\n    if(this.props){\r\n      // Scroll lyrics to the top when a new track is loaded\r\n      if(this.props.lyrics.lyrics !== prevprops.lyrics.lyrics){\r\n        this.lyricDiv.current.scrollTop = 0;\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n\r\n    let lyricsText = <p></p>;\r\n    if(this.props.lyrics && this.props.lyrics.lyrics){\r\n      lyricsText = <p>{this.props.lyrics.lyrics}</p>;\r\n    }\r\n    else if(this.props.lyrics && this.props.lyrics.error){\r\n      lyricsText = <p>{this.props.lyrics.error}</p>;\r\n    }\r\n\r\n    return (  \r\n      <div className='lyrics-pane' ref={this.lyricDiv}>\r\n        {lyricsText}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Lyrics","import React, {Component} from 'react'\r\n\r\nclass SelectedSongDisplay extends Component {\r\n\r\n\r\n  render() {\r\n    let trackImage;\r\n    if(this.props.selectedSong.art.length !== 0){\r\n      let imageURL = (this.props.selectedSong.art.length > 0 ? this.props.selectedSong.art : 'https://lastfm.freetls.fastly.net/i/u/64s/4128a6eb29f94943c9d206c08e625904.webp');\r\n      trackImage = <img src={imageURL} alt=\"track art\"></img>\r\n    }\r\n    return (  \r\n        <div className=\"current-track\">\r\n          {trackImage}\r\n          <div>\r\n            <h2>{this.props.selectedSong.track}</h2>\r\n            <h2>{this.props.selectedSong.artist}</h2>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SelectedSongDisplay","import React, {Component} from 'react'\r\n\r\nimport UserInput from './UserInput'\r\nimport Header from './Header'\r\nimport TrackHistory from './TrackHistory'\r\nimport Lyrics from './Lyrics'\r\nimport SelectedSongDisplay  from './SelectedSongDisplay'\r\nimport Spinner from 'react-bootstrap/Spinner' \r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      username: '', \r\n      lastFmHistory:[],\r\n      lyrics: [],\r\n      fetchedTracks: [],\r\n      updateLyrics: true,\r\n      mostRecentScrobbleId: '',\r\n      selectedSong: {'artist': '', 'track':'', 'art': ''},\r\n      hideTrackHistory: true,\r\n    };\r\n    this.updateInterface = this.updateInterface.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.setLyrics = this.setLyrics.bind(this);\r\n    this.setUpdateLyricsState = this.setUpdateLyricsState.bind(this);\r\n    this.toggleTrackHistory = this.toggleTrackHistory.bind(this);\r\n    this.interval = null;\r\n    this.gettingLyrics = false; \r\n  }\r\n\r\n  handleSubmit(username){\r\n    this.setState({username: username})\r\n    this.updateInterface(username);\r\n    this.clearInterval();\r\n    this.interval = setInterval(e => this.updateInterface(username),60000);\r\n  }\r\n\r\n  setUpdateLyricsState(booleanValue){\r\n    this.setState({updateLyrics:booleanValue},()=>{\r\n      this.updateInterface(this.state.username);\r\n    });\r\n  }\r\n\r\n  updateInterface(username){\r\n    getLastFmHistoryJson(username).then(response =>{\r\n      // Check if any tracks\r\n      if(response.recenttracks){\r\n        this.updateLyricsPane(response)\r\n        this.setState({lastFmHistory: response})\r\n      }\r\n      else{\r\n        this.setState({username:'No User Found'})\r\n      }\r\n    })\r\n  }\r\n\r\n  updateLyricsPane(response){\r\n    if(this.state.updateLyrics){\r\n      // If there are any scrobbled tracks\r\n      if(response.recenttracks.track.length > 0){\r\n        // If the most recent scrobble hasn't already had its lyrics fetched\r\n        let responseId = response.recenttracks.track[0].mbid;\r\n        if(responseId !== this.state.mostRecentScrobble || responseId === ' '){\r\n          let mostRecentTrack = response.recenttracks.track[0]\r\n          this.setLyrics(mostRecentTrack);\r\n          this.setState({mostRecentScrobble: responseId});\r\n        }\r\n      } \r\n      else{\r\n        this.setState({lyrics:{'error':'No Tracks Found'}})\r\n      }\r\n    }\r\n  }\r\n\r\n  setLyrics(track){\r\n    // check if already fetching lyrics\r\n    if(!this.gettingLyrics){\r\n      this.gettingLyrics = true;\r\n      // Check if the track information has been cached\r\n      let fetchedTrack = this.state.fetchedTracks.find(\r\n        storedTrack => storedTrack.trackTitle === track.name \r\n        && storedTrack.artist === track.artist['#text']);\r\n      if(fetchedTrack){\r\n        this.gettingLyrics = false;\r\n        this.setState({selectedSong:{'artist': fetchedTrack.artist, 'track':fetchedTrack.trackTitle, 'art':fetchedTrack.trackImage}})\r\n        this.setState({lyrics:{'lyrics':fetchedTrack.lyrics}})\r\n      }\r\n      else{\r\n        getTrackLyricsJson(track.artist['#text'], track.name)\r\n        .then(response =>{\r\n          if(response.error){\r\n            // If no lyrics are returned, search again with the last word removed from the track title\r\n            // This solves the problem of 'London Calling - Remastered' returning no lyrics\r\n            // When lyrics are available for 'London Calling'\r\n            let shortenedTrackName = track.name.substring(0, track.name.lastIndexOf(\" \"));\r\n            if(shortenedTrackName.length > 0){\r\n              let newTrack = track;        \r\n              newTrack.name = shortenedTrackName;\r\n              this.gettingLyrics = false;\r\n              this.setLyrics(newTrack);\r\n            }\r\n            else{\r\n              this.gettingLyrics = false;\r\n              this.setState({lyrics:{'error':'No Lyrics Found'}})\r\n              this.setState({selectedSong:{'artist': '', 'track': '', 'art': ''}})\r\n            }\r\n          } \r\n          else{\r\n            this.gettingLyrics = false;\r\n            if(response.lyrics === \"\"){\r\n              this.setState({lyrics:{'error':'Unable to process request. \\n Please try again Shortly. \\n If you continue to see this message then lyrics may not be avaiable for this song'}})\r\n            }\r\n            else{\r\n              let trackArt = (track.image[2] ? track.image[2]['#text'] : '');\r\n              // Cache the track information\r\n              this.state.fetchedTracks.push({artist: track.artist['#text'], trackTitle:track.name, lyrics:response.lyrics, trackImage:trackArt});\r\n              this.setState({selectedSong:{'artist': track.artist['#text'], 'track':track.name, 'art':trackArt}})\r\n              this.setState({lyrics:response})\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleTrackHistory(){\r\n    this.setState({hideTrackHistory:!this.state.hideTrackHistory});\r\n  }\r\n\r\n  clearInterval(){\r\n    if(this.interval){\r\n      clearInterval(this.interval);\r\n      this.interval = null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const username = this.state.username;\r\n    const lastFmHistory = this.state.lastFmHistory;\r\n    const trackLyrics = this.state.lyrics\r\n    const selectedSong = this.state.selectedSong;\r\n    const hideTrackHistory = this.state.hideTrackHistory;\r\n\r\n    let mainContent = <Lyrics lyrics={trackLyrics}/>\r\n    if(this.gettingLyrics){\r\n      mainContent = \r\n      <div className='spinner-container'>\r\n        <Spinner id='loading-spinner' animation=\"border\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n        </Spinner> \r\n      </div>\r\n    }\r\n    return (\r\n      <div className=\"appContainer\">\r\n        <Header toggleTrackHistory ={this.toggleTrackHistory}/>\r\n        <TrackHistory\r\n          hideTrackHistory={hideTrackHistory}\r\n          trackHistory={lastFmHistory}\r\n          setLyrics={this.setLyrics}\r\n          setUpdateLyricsState={this.setUpdateLyricsState}/>\r\n        <div className='top-display'>\r\n          <UserInput  \r\n            handleSubmit={this.handleSubmit}\r\n            username={username}\r\n            updateInterface={this.updateInterface}\r\n            setUpdateLyricsState={this.setUpdateLyricsState}/>\r\n          <SelectedSongDisplay selectedSong={selectedSong}/>\r\n        </div>\r\n        {mainContent}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction getLastFmHistoryJson (username){\r\n  return new Promise((resolve,reject) =>{\r\n    fetch ('/getlastfm/' + username)\r\n    .then(res => {\r\n      resolve(res.json());  \r\n    });\r\n  })\r\n}\r\n\r\nfunction getTrackLyricsJson(artist,track_title){ \r\n  return new Promise((resolve,reject) =>{\r\n    fetch('/getlyrics/' + artist +'/' + track_title)\r\n    .then(res =>{\r\n     resolve(res.json()); \r\n    })\r\n  })\r\n} \r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './stylesheets/index.css'\nimport './stylesheets/reset.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}